* Emacs configuration

This is my emacs configuration in Org mode.

** Initial configuration
*** Some personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jeff Hemminger"
      user-mail-address "jeff.hemminger@deciphernow.com")
#+END_SRC

*** Help emacs find my executables

#+BEGIN_SRC emacs-lisp
(setq exec-path 
    (append exec-path 
        (list 
            '("/usr/local/bin") 
            '("/home/jeff/bin") 
            '("/home/jeff/go/bin"))))
#+END_SRC

*** plumbing

    Tell emacs that all saves should go to the ~/.backups~ folder.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.backups")))
#+END_SRC

    Tell emacs that y or n will suffice.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq dired-listing-switches "-alh")
#+END_SRC

    Set custom settings in their own file
#+BEGIN_SRC emacs-lisp
;; Figure out the path to our .emacs.d by getting the path part of the
;; current file (`init.el`).
(setq dotfiles-dir (file-name-directory (or (buffer-file-name) (file-chase-links load-file-name))))
(setq custom-file (concat dotfiles-dir "custom.el"))
(load custom-file 'noerror)
#+END_SRC

*** Appearance

    Select the font size, family...

#+BEGIN_SRC emacs-lisp
(set-face-attribute
 'default nil :family "Operator Mono"
 :height 160)
#+END_SRC

*** Just load themes

I accept the risk. Theme tooltips too.
#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
(setq x-gtk-use-system-tooltips nil)
#+END_SRC

*** maintaining selected theme between sessions

    I got this from @pepegar[fn:1], and he thinks he got it from @anler[fn:2].

#+BEGIN_SRC emacs-lisp
(defun my-load-saved-theme ()
  (interactive)
  (when (file-exists-p my-saved-theme-filename)
    (let ((theme (intern (with-temp-buffer
                           (insert-file-contents my-saved-theme-filename)
                           (buffer-string)))))
      (unless (eq theme 'default)
        (load-theme theme :no-confirm)))))

(add-hook 'after-init-hook #'my-load-saved-theme)

(defvar my-load-theme-hook
  nil
  "Hooks to run after loading a theme.")

(defvar my-saved-theme-filename "~/.emacs.d/.emacs-theme")

(advice-add 'load-theme :after #'my-save-theme)
(advice-add 'disable-theme :after #'my-save-default-theme)
(advice-add 'load-theme :after #'my-run-theme-hooks)

(defun my-run-theme-hooks (theme &optional no-confirm no-enable)
  (run-hooks 'my-load-theme-hook))

(defun my-save-default-theme (disabled-theme)
  (my-save-theme 'default))

(defun my-save-theme (theme &optional no-confirm no-enable)
  (with-temp-buffer
    (insert (symbol-name theme))
    (when (file-writable-p my-saved-theme-filename)
      (write-region (point-min)
                    (point-max)
                    my-saved-theme-filename))))
#+END_SRC

*** Reload configuration via function
#+BEGIN_SRC emacs-lisp
;; if you make changes to config.org, simply M-x load-config to reload
(defun load-config ()
  (interactive)
  (org-babel-load-file (expand-file-name (concat user-emacs-directory "config.org"))))

#+END_SRC

** Tools
*** Magit
From within a git repository, `C-x g` for status.
Stage changes.
`c` for commit.
`M-x magit-push` to push.
Magit is a git porcelin.

https://github.com/magit/forge

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands magit-status
  :bind ("C-x g" . magit-status)
)

(use-package forge)

#+END_SRC

*** Projectile
https://github.com/bbatsov/projectile

Project Interaction Library
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :commands (all-the-icons-icon-for-dir all-the-icons-icon-for-file)
  :ensure
  :config
  (progn
    (use-package neotree :ensure)
    (projectile-mode 1)
    (defun neotree-project-dir ()
      "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (if project-dir
            (if (neotree-toggle)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root."))))
    (global-set-key [f8] 'neotree-project-dir)
    ))
#+END_SRC

*** Autopair

    Autopair is a minor mode that magically pairs your parens.  This
    means that when you open a ~(~, it inserts a ~)~ as well.

#+BEGIN_SRC emacs-lisp
(use-package autopair
  :ensure t
  :config
  (autopair-global-mode))
#+END_SRC

*** Hydra

    Hydra allows me to create menus of keybindings.

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :bind (("C-x t" . toggle/body)
         ("C-x ," . scala/body)
	 ("C-x p" . dotfiles/body))
  :config

  (defhydra scala (:color red)
    "scala"
    ("b" ensime-sbt "sbt")
    ("c" ensime-inf-switch "console")
    ("t" ensime-sbt-do-test "test"))

  (defhydra toggle (:color blue)
    "toggle"
    ("a" abbrev-mode "abbrev")
    ("s" flyspell-mode "flyspell")
    ("f" flycheck-mode "flycheck")
    ("d" toggle-debug-on-error "debug")
    ("c" fci-mode "fCi")
    ("t" toggle-truncate-lines "truncate")
    ("w" whitespace-mode "whitespace")
    ("q" nil "cancel"))

  (defhydra dotfiles (:color black)
    "dotfiles"
    ("c" (find-file "~/.emacs.d/config.org") "config.org")
    ("b" (find-file "~/.bashrc") "bashrc")
    ("s" (find-file "~/Source") "Source")
    ("q" nil "cancel")))

#+END_SRC

*** Restclient

    Restclient is an awesome tool that allows you to describe HTTP
    request in plain text and execute them.  From [fn:1]their readme:

    | keybinding | action                                                                                         |
    |------------+------------------------------------------------------------------------------------------------|
    | ~C-c C-c~  | runs the query under the cursor, tries to pretty-print the response (if possible)              |
    | ~C-c C-r~  | same, but doesn't do anything with the response, just shows the buffer                         |
    | ~C-c C-v~  | same as C-c C-c, but doesn't switch focus to other window                                      |
    | ~C-c C-p~  | jump to the previous query                                                                     |
    | ~C-c C-n~  | jump to the next query                                                                         |
    | ~C-c C-.~  | mark the query under the cursor                                                                |
    | ~C-c C-u~  | copy query under the cursor as a curl command                                                  |
    | ~C-c C-g~  | start a helm session with sources for variables and requests (if helm is available, of course) |
    | ~C-c n n~  | narrow to region                                                                               |

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t
  :mode (("\\.http\\'" . restclient-mode)))
#+END_SRC

*** Org mode

Your life in plain text.

When emacs is initialized it will create a directory org in your home. Org files will be stored there.

C-c c prompts for a menu of options for creating notes, todo lists, etc.
C-c a a prompts a menu of options for listing activity.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :bind (
         ("C-c a a" . org-agenda)
	 ("C-c c" . org-capture)
  )
  :config
  (setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                           ("~/org/someday.org" :level . 1)
                           ("~/org/tickler.org" :maxlevel . 2)))
  (setq org-agenda-files '("~/org/inbox.org" "~/org/gtd.org" "~/org/tickler.org")
	org-default-notes-file (concat org-directory "~/org/notes.org")
	org-capture-templates '(
          ("t" "Todo [inbox]" entry (file+headline "~/org/inbox.org" "Tasks") "* TODO %i%?")
          ("T" "Tickler" entry (file+headline "~/org/tickler.org" "Tickler") "* %i%? \n %U")
        )
	org-src-fontify-natively t)
  (setq 
    og-org-agenda-appt-headline "APPT"
    org-agenda-log-mode-items (quote( closed clock state))
    org-agenda-restore-windows-after-quit t
    org-agenda-show-future-repeats nil
    org-agenda-span (quote week)
    org-capture-use-agenda-date t
    org-clock-clocked-in-display (quote mode-line)
    org-clock-in-resume t
    org-clock-mode-line-total (quote today)
  )
  (setq org-agenda-custom-commands
   (quote
    (("w" . "TODOs")
     ("d" "30 days deadlines" agenda ""
      ((org-agenda-entry-types
        (quote
         (:deadline)))
       (org-agenda-overriding-header "Month deadlines")
       (org-agenda-span
        (quote month))))
     ("l" "Logbook" nico/org-agenda-log ""
      ((org-agenda-overriding-header "Logbook")))
     ("A" "Aur√©lia" tags-todo "aurelia" nil)
     ("E" "Errands" tags-todo "@errands" nil)
     ("n" "Next actions"
      ((alltodo ""
                ((org-agenda-overriding-header "Next actions")
                 (org-agenda-skip-function
                  (quote
                   (org-agenda-skip-all-siblings-but-first)))
                 (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")
                 (org-agenda-todo-keyword-format "%-4s")
                 (org-agenda-files
                  (quote
                   ("~/org/gtd.org")))
                 (org-agenda-category-filter-preset
                  (quote
                   ("+projects"))))))
      nil nil)
     ("@" "Contexts"
      ((tags "ftgp"
             ((org-agenda-skip-function
               (quote
                (org-agenda-skip-all-siblings-but-first)))
              (org-agenda-overriding-header "FTGP next actions")
              (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")))
       (tags "emacs"
             ((org-agenda-overriding-header "Emacs next actions")
              (org-agenda-skip-function
               (quote
                (org-agenda-skip-all-siblings-but-first)))
              (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")))
       (tags-todo "@phone"
                  ((org-agenda-overriding-header "Phone calls")
                   (org-agenda-skip-function
                    (quote
                     (org-agenda-skip-entry-if
                      (quote todo)
                      (quote done))))
                   (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")))
       (todo "WAITING"
             ((org-agenda-overriding-header "Waiting")
              (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")))
       (tags-todo "@work"
                  ((org-agenda-skip-function
                    (quote
                     (org-agenda-skip-all-siblings-but-first)))
                   (org-agenda-overriding-header "At work")
                   (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")))
       (tags-todo "@plourin"
                  ((org-agenda-overriding-header "At Plourin")
                   (org-agenda-skip-function
                    (quote
                     (org-agenda-skip-all-siblings-but-first)))
                   (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")))
       (tags-todo "@stmartin"
                  ((org-agenda-overriding-header "At Saint Martin")
                   (org-agenda-skip-function
                    (quote
                     (org-agenda-skip-all-siblings-but-first)))
                   (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")))
       (tags-todo "@stockholm"
                  ((org-agenda-overriding-header "At Stockholm")
                   (org-agenda-skip-function
                    (quote
                     (org-agenda-skip-all-siblings-but-first)))
                   (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)")))
       (tags-todo "@home"
                  ((org-agenda-overriding-header "At Home")
                   (org-agenda-skip-function
                    (quote
                     (org-agenda-skip-all-siblings-but-first)))
                   (org-agenda-prefix-format "%-32:(org-agenda-format-parent 30)"))))
      nil nil)))
  )
  )
#+END_SRC
    
*** Expand region

    Expand region is an useful little tool.  With it I can select a
    higher region each time I hit ~C-@~.  For example, imagine we have
    the following function call in lisp (and that the caret is in the
    ~^~ position):

#+BEGIN_SRC
(hello (dolly))
         ^
#+END_SRC

    If I hit ~C-@~ once, I'll get this selected:

#+BEGIN_SRC
(hello (dolly))
        ^---^
#+END_SRC

    If I hit it once again, I'll get:

#+BEGIN_SRC
(hello (dolly))
       ^-----^
#+END_SRC

    And if I hit it again, I'll get:

#+BEGIN_SRC
(hello (dolly))
 ^-----------^
#+END_SRC

    Finally, if I hit it 4 times, the whole sexp will be selected:

#+BEGIN_SRC
(hello (dolly))
^-------------^
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region))
#+END_SRC

*** Golden ratio mode

    This is a really cool minor mode.  It makes the windows just look right.

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :config (golden-ratio-mode))
#+END_SRC

*** Eshell Configuration
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") 'eshell)
;; Visual commands are commands which require a proper terminal.
;; Eshell will run them in a term buffer when invoked.
(setq eshell-visual-commands
  '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))
(setq eshell-visual-subcommands
  '(("git" "log" "l" "diff" "show")))

(use-package exec-path-from-shell
  :ensure t
  :init
  (when (memq window-system '(mac ns x))
   ; (exec-path-from-shell-copy-env "PROJECT_HOME")
    (exec-path-from-shell-copy-env "JAVA_HOME")
    (exec-path-from-shell-initialize))
  )

#+END_SRC

*** Terraform
[[https://github.com/syohex/emacs-terraform-modehttps://github.com/syohex/emacs-terraform-mode][github]]
A little help with terraform:
- Syntax highlighting
- Indentation
- imenu

#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :ensure
  :mode (("\\.tf$" . terraform-mode))
  :config
  (progn
    (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
   )
   (setq terraform-indent-level 4))
#+END_SRC

*** Yaml
[[https://github.com/yoshiki/yaml-mode][github]]
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure
  :mode (("\\.yml\\'" . yaml-mode))
  :config
  (progn
    (use-package yaml-tomato :ensure)
    ))
#+END_SRC

*** Ivy
Open swiper-isearch with C-s, and then put copy the word under the cursor to the minibuffer with M-n.

For extending the search to the next word, use M-j.
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :bind (("C-x C-b" . ivy-switch-buffer))
  :config
      (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d "
            ;;ivy-re-builders-alist '((swiper . ivy--regex-plus)
            ;;                        (t      . ivy--regex-fuzzy))
))
(use-package flx)

(use-package counsel
  :bind (("M-x"     . counsel-M-x)
         ([f9]      . counsel-load-theme)))

(use-package counsel-projectile
  :bind (("C-c a g" . counsel-ag)
         ("C-x C-f" . counsel-find-file)
         ("C-c p h" . counsel-projectile)
         ("C-c p v" . projectile-vc)
         ("C-c p p" . counsel-projectile-switch-project)))

(use-package swiper
  :bind (("C-s" . swiper)
         ("C-;" . swiper-avy)))
#+END_SRC

*** Docker
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :mode ("Dockerfile\\'" . dockerfile-mode))

(use-package docker
  :ensure t)

(use-package docker-api
  :defer t)

(use-package docker-compose-mode
  :ensure t)

(use-package docker-tramp
  :ensure t)

(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+END_SRC
    
** Themes

#+BEGIN_SRC emacs-lisp
(use-package doom-themes :pin melpa-stable :ensure t :defer t)
(use-package idea-darkula-theme :ensure t :defer t)
(use-package punpun-theme :ensure t :defer t)
(use-package white-theme :ensure t :defer t)
(use-package arjen-grey-theme :ensure t :defer t)
(use-package atom-one-dark-theme :ensure t :defer t)
(use-package birds-of-paradise-plus-theme :ensure t :defer t)
(use-package bliss-theme :ensure t :defer t)
(use-package cyberpunk-theme :ensure t :defer t)
(use-package espresso-theme :ensure t :defer t)
(use-package github-theme :ensure t :defer t)
(use-package heroku-theme :ensure t :defer t)
(use-package idea-darkula-theme :ensure t :defer t)
(use-package plan9-theme :ensure t :defer t)
(use-package soothe-theme :ensure t :defer t)
(use-package subatomic-theme :ensure t :defer t)
(use-package sublime-themes :ensure t :defer t)
(use-package white-theme :ensure t :defer t)
(use-package madhat2r-theme :ensure t :defer t)
(use-package kosmos-theme :ensure t :defer t)
(use-package nord-theme :ensure t :defer t)
#+END_SRC

** Programming languages

*** Scala
#+BEGIN_SRC emacs-lisp
(use-package ensime
  :ensure t
  :pin melpa-stable
  :config (setq ensime-startup-notification nil))

(use-package scala-mode
  :ensure t
  :interpreter ("scala" . scala-mode)
  :config
  (use-package sbt-mode :ensure t))

#+END_SRC

*** Go
It's a sad day when you have fallen to writing Go code.

#+BEGIN_SRC emacs-lisp
(use-package auto-complete :ensure)
(defun auto-complete-for-go ()
  (auto-complete-mode 1))
  (add-hook 'go-mode-hook 'auto-complete-for-go)


(use-package go-mode
  :ensure t
  :bind (("M-." . godef-jump)
         ("M-," . pop-tag-mark))
  :init
  (use-package go-eldoc
    :ensure t
    :config
    (add-hook 'go-mode-hook 'go-eldoc-setup))
  (use-package go-complete
    :ensure t
    :config
    (add-hook 'go-mode-hook 'auto-complete-for-go))
  (use-package flycheck
    :ensure t
    :config 
      (setq gofmt-command "goimports")
      (add-hook 'before-save-hook 'gofmt-before-save)))

#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+END_SRC

** Some more configuration for when all packages have been loaded

#+BEGIN_SRC emacs-lisp
(require 'bind-key)
#+END_SRC

** Thanks

Most of this is borrowed configuration from others. I thank them here, but 
also check the Footnotes.

Thanks to Pepe Garcia[fn:1], most of this is his.

Also Bodil Stokke[fn:7]; ohai emacs remains an inspiration.

* Footnotes

[fn:1] https://github.com/pepegar/.emacs.d
[fn:2] https://github.com/anler/.emacs.d
[fn:3] https://github.com/danielmai
[fn:4] https://github.com/jwiegley
[fn:5] https://github.com/abo-abo
[fn:6] https://github.com/pashky/restclient.el
[fn:7] https://github.com/bodil
